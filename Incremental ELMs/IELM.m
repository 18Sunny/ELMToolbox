% IELM - Incremental Extreme Learning Machine Class
%   Train and Predict a SLFN based on Incremental Extreme Learning Machine
%
%   This code was implemented based on the following paper:
%
%   [1] Huang, G. Bin, Chen, L., & Siew, C. K. (2006). 
%       Universal approximation using incremental constructive 
%       feedforward networks with random hidden nodes. 
%       IEEE Transactions on Neural Networks, 17(4), 879â€“892. 
%       https://doi.org/10.1109/TNN.2006.875977
%       
%   Attributes:
%       Attributes between *.* must be informed.
%       IELM objects must be created using name-value pair arguments (see the Usage Example).
%
%         *numberOfInputNeurons*:   Number of neurons in the input layer.
%                Accepted Values:   Any positive integer.
%
%          numberOfHiddenNeurons:   Maximum number of neurons in the hidden layer
%                Accepted Values:   Any positive integer (defaut = 1000).
%
%                   maximumError:   Maximum error (used as stopping criterion)
%                Accepted Values:   Any positive real number. (default = 1e-3)
%
%             activationFunction:   Activation funcion for hidden layer
%                Accepted Values:   Function handle (see [1]) or one of these strings:
%                                       'sig':     Sigmoid (default)
%                                       'sin':     Sine
%                                       'hardlim': Hard Limit
%                                       'tribas':  Triangular basis function
%                                       'radbas':  Radial basis function
%
%                           seed:   Seed to generate the pseudo-random values.
%                                   This attribute is for reproducible research.
%                Accepted Values:   RandStream object or a integer seed for RandStream.
%
%       Attributes generated by the code:
%
%                    inputWeight:   Weight matrix that connects the input
%                                   layer to the hidden layer
%
%            biasOfHiddenNeurons:   Bias of hidden units
%
%                   outputWeight:   Weight matrix that connects the hidden
%                                   layer to the output layer
%
%   Methods:
%
%           obj = IELM(varargin):   Creates IELM objects. varargin should be in
%                                   pairs. Look attributes
%
%           obj = obj.train(X,Y):   Method for training. X is the input of size N x n,
%                                   where N is (# of samples) and n is the (# of features).
%                                   Y is the output of size N x m, where m is (# of multiple outputs)
%
%          Yhat = obj.predict(X):   Predicts the output for X.
%
%   Usage Example:
%
%       load iris_dataset.mat
%       X    = irisInputs';
%       Y    = irisTargets';
%       ielm  = IELM('numberOfInputNeurons', 4, 'numberOfHiddenNeurons',100);
%       ielm  = ielm.train(X, Y);
%       Yhat = ielm.predict(X)
%
%   License:
%
%   Permission to use, copy, or modify this software and its documentation
%   for educational and research purposes only and without fee is here
%   granted, provided that this copyright notice and the original authors'
%   names appear on all copies and supporting documentation. This program
%   shall not be used, rewritten, or adapted as the basis of a commercial
%   software or hardware product without first obtaining permission of the
%   authors. The authors make no representations about the suitability of
%   this software for any purpose. It is provided "as is" without express
%   or implied warranty.
%
%       Federal University of Espirito Santo (UFES), Brazil
%       Computers and Neural Systems Lab. (LabCISNE)
%       Authors:    B. L. S. Silva, F. K. Inaba, D. L. Cosmo
%       email:      labcisne@gmail.com
%       website:    github.com/labcisne/ELMToolbox
%       date:       Feb/2018

classdef IELM < ELM
    properties
        maximumError = 1e-3;
    end
    properties (SetAccess = private, GetAccess = public)
        error
    end
    methods
        function self = IELM(varargin)
            self = self@ELM(varargin{:});
        end
        
        function self = train(self, X, Y)
            auxTime = toc;
            N = 0;
            self.inputWeight = [];
            self.biasOfHiddenNeurons = [];
            self.error = Y;
            while N < self.numberOfHiddenNeurons && norm(self.error) > self.maximumError
                N = N+1;
                Wnew = rand(self.seed, self.numberOfInputNeurons, 1)*2-1;
                Bnew = rand(self.seed, 1, 1);
                tempH = X*Wnew + repmat(Bnew,size(X,1),1);
                H = self.activationFunction(tempH);
                clear tempH;
                betaN = H'*self.error/(H'*H);
                
                self.inputWeight = [self.inputWeight, Wnew];
                self.biasOfHiddenNeurons = [self.biasOfHiddenNeurons, Bnew];
                self.outputWeight = [self.outputWeight; betaN];
                
                self.error = self.error - H*betaN;
                
            end
            self.trainTime = toc - auxTime;
        end
        
    end
end
