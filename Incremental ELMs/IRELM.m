% IRELM - Incremental Regularized Extreme Learning Machine Class
%   Train and Predict a SLFN based on Incremental Regularized Extreme Learning Machine
%
%   This code was implemented based on the following paper:
%
%   [1] Xu, Z., Yao, M., Wu, Z., & Dai, W. (2016).
%   Incremental regularized extreme learning machine and it׳s enhancement.
%   Neurocomputing, 174, 134–142.
%   https://doi.org/10.1016/j.neucom.2015.01.097
%
%   Attributes:
%       Attributes between *.* must be informed.
%       IRELM objects must be created using name-value pair arguments (see the Usage Example).
%
%         *numberOfInputNeurons*:   Number of neurons in the input layer.
%                Accepted Values:   Any positive integer.
%
%          numberOfHiddenNeurons:   Initial number of neurons in the hidden layer
%                Accepted Values:   Any positive integer (defaut = 1).
%
%       maxNumberOfHiddenNeurons:   Maximum number of neurons in the hidden layer
%                Accepted Values:   Any positive integer (defaut = 1000).
%
%        regularizationParameter:   Regularization Parameter (defaut = 1000)
%                Accepted Values:   Any positive real number.
%
%                   maximumError:   Maximum error (used as stopping criterion)
%                Accepted Values:   Any positive real number. (default = 1e-3)
%
%             activationFunction:   Activation funcion for hidden layer
%                Accepted Values:   Function handle (see [1]) or one of these strings:
%                                       'sig':     Sigmoid (default)
%                                       'sin':     Sine
%                                       'hardlim': Hard Limit
%                                       'tribas':  Triangular basis function
%                                       'radbas':  Radial basis function
%
%                           seed:   Seed to generate the pseudo-random values.
%                                   This attribute is for reproducible research.
%                Accepted Values:   RandStream object or a integer seed for RandStream.
%
%       Attributes generated by the code:
%
%                    inputWeight:   Weight matrix that connects the input
%                                   layer to the hidden layer
%
%            biasOfHiddenNeurons:   Bias of hidden units
%
%                   outputWeight:   Weight matrix that connects the hidden
%                                   layer to the output layer
%
%   Methods:
%
%          obj = IRELM(varargin):   Creates IELM objects. varargin should be in
%                                   pairs. Look attributes
%
%           obj = obj.train(X,Y):   Method for training. X is the input of size N x n,
%                                   where N is (# of samples) and n is the (# of features).
%                                   Y is the output of size N x m, where m is (# of multiple outputs)
%
%          Yhat = obj.predict(X):   Predicts the output for X.
%
%   Usage Example:
%
%       load iris_dataset.mat
%       X    = irisInputs';
%       Y    = irisTargets';
%       irelm  = IRELM('numberOfInputNeurons', 4, 'numberOfHiddenNeurons',100);
%       irelm  = irelm.train(X, Y);
%       Yhat = irelm.predict(X)
%
%   License:
%
%   Permission to use, copy, or modify this software and its documentation
%   for educational and research purposes only and without fee is here
%   granted, provided that this copyright notice and the original authors'
%   names appear on all copies and supporting documentation. This program
%   shall not be used, rewritten, or adapted as the basis of a commercial
%   software or hardware product without first obtaining permission of the
%   authors. The authors make no representations about the suitability of
%   this software for any purpose. It is provided "as is" without express
%   or implied warranty.
%
%       Federal University of Espirito Santo (UFES), Brazil
%       Computers and Neural Systems Lab. (LabCISNE)
%       Authors:    B. L. S. Silva, F. K. Inaba, D. L. Cosmo
%       email:      labcisne@gmail.com
%       website:    github.com/labcisne/ELMToolbox
%       date:       Feb/2018

classdef IRELM < ELM
    properties
        maxNumberOfHiddenNeurons  = 1000
        regularizationParameter = 1000;
        pseudoInv
        maxError = 1e-3
        nodesByIteration = 1
    end
    properties (Access = private)
        H
        C
    end
    
    methods
        function self = IRELM(varargin)
            self = self@ELM('numberOfHiddenNeurons',1,varargin{:});
            % The equations used in the paper uses Beta = inv(CI + H'H)*H'*y,
            % instead of Beta = inv(I/C +H'H)*H'*y. So, to avoid mistakes,
            % the equations implemented will consider the same as the paper
            self.C = 1/self.regularizationParameter;
        end
        
        function pi = pseudoinverse(self,h)
            if size(h,1)>=size(h,2)
                pi = pinv(h' * h + self.C*eye(size(h,2))) * h';
            else
                pi = h' * pinv(h * h' + self.C*eye(size(h,1)));
            end
        end
        
        function self = train(self, X, Y)
            auxTime = toc;
            self.C = 1/self.regularizationParameter;
            
            %Train with initial number of hidden neurons
            tempH = X*self.inputWeight + repmat(self.biasOfHiddenNeurons,size(X,1),1);
            self.H = self.activationFunction(tempH);
            
            self.pseudoInv = self.pseudoinverse(self.H); %self.pseudoInv = Ds
            self.outputWeight = self.pseudoInv * Y;
            
            E = norm(self.H*self.outputWeight - Y,'fro');
            
            while (self.numberOfHiddenNeurons < self.maxNumberOfHiddenNeurons) && (E > self.maxError)
                
                self.numberOfHiddenNeurons = self.numberOfHiddenNeurons + self.nodesByIteration;
                
                Wnew = rand(self.seed, self.numberOfInputNeurons, self.nodesByIteration)*2-1;
                Bnew = rand(self.seed, 1, self.nodesByIteration);
                self.inputWeight = [self.inputWeight, Wnew];
                self.biasOfHiddenNeurons = [self.biasOfHiddenNeurons, Bnew];
                
                tempH = X*Wnew + repmat(Bnew,size(X,1),1);
                vs = self.activationFunction(tempH);
                clear tempH;
                
                Ms = vs'*(eye(size(self.H,1)) - self.H*self.pseudoInv);
                Ms = pinv(Ms*vs + eye(size(Ms,1))*self.C)*Ms;
                Ls = self.pseudoInv*(eye(size(vs,1)) - vs*Ms);
                
                self.pseudoInv = [Ls; Ms];
                self.outputWeight = self.pseudoInv*Y;
                self.H = [self.H, vs];
                
            end
            self.trainTime = toc - auxTime;
            
        end
        
    end
end